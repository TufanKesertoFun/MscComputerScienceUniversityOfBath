from collections import deque

class Node:
    def __init__(self, state, parent=None, action=None):
        self.state = state  # (missionaries_left, cannibals_left, boat_left)
        self.parent = parent
        self.action = action

    def is_goal_state(self):
        return self.state == (0, 0, 0)

    def is_valid_state(self):
        m_left, c_left, _ = self.state
        m_right = 3 - m_left
        c_right = 3 - c_left

        # Conditions to be valid:
        # Missionaries are never outnumbered on either side (or there are no missionaries)
        return (m_left >= c_left or m_left == 0) and (m_right >= c_right or m_right == 0)

    def get_child_node(self, action):
        new_state = (
            self.state[0] - action[0] * self.state[2],
            self.state[1] - action[1] * self.state[2],
            1 - self.state[2],  # Flip boat side
        )
        return Node(new_state, parent=self, action=action)

    def get_solution_path(self):
        path = []
        node = self
        while node:
            if node.action:
                path.append((node.action, node.state))
            node = node.parent
        path.reverse()
        return path

class Game:
    def __init__(self):
        self.initial_node = Node((3, 3, 1))  # 3 missionaries, 3 cannibals, boat on left

    def breadth_first_search(self):
        frontier = deque([self.initial_node])
        explored = set()

        while frontier:
            current_node = frontier.popleft()

            if current_node.is_goal_state():
                return current_node

            explored.add(current_node.state)

            for action in [(1, 0), (0, 1), (1, 1), (2, 0), (0, 2)]:
                child_node = current_node.get_child_node(action)

                if (child_node.state not in explored and
                        child_node.state[0] >= 0 and child_node.state[1] >= 0 and
                        child_node.state[0] <= 3 and child_node.state[1] <= 3 and
                        child_node.is_valid_state()):
                    frontier.append(child_node)

        return None  # No solution found

# Running the game and finding the solution
g = Game()
goal_node = g.breadth_first_search()
if goal_node:
    solution_path = goal_node.get_solution_path()
    print("Solution path:")
    for action, state in solution_path:
        print(f"Action: {action}, Resulting State: {state}")
else:
    print("No solution found.")
